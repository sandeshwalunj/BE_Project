{"ast":null,"code":"var _jsxFileName = \"G:\\\\blockchain-scm\\\\appfrontend\\\\src\\\\components\\\\Home.js\";\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AddIcon from '@material-ui/icons/Add';\nimport { PRODUCT_STATUSES, STATUS_ACTIONS } from './enum/ProductStatusEnum';\nimport { USER_TYPES } from './enum/UsersEnum';\nimport ProductBatchForm from './ProductBatchForm';\nimport ProductDetails from './ProductDetails';\nimport PerformStatusAction from './PerformStatusAction';\nimport BatchTable from './BatchTable';\nimport ToastMessage from \"./ToastMessage\";\nimport TabPanel from \"./TabPanel\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { CircularPageLoader } from \"./static/CircularPageLoader\";\nimport \"../css/App.css\";\nconst cols = [{\n  field: \"productID\",\n  title: \"Product ID\",\n  numeric: true,\n  align: \"left\"\n}, {\n  field: \"productName\",\n  title: \"Product Name\",\n  numeric: false,\n  align: \"left\"\n}, {\n  field: \"productStatus\",\n  title: \"Status\",\n  numeric: false,\n  align: \"left\"\n}, {\n  field: \"action\",\n  title: \"Action\",\n  numeric: false,\n  align: \"center\"\n}, {\n  field: \"productDesc\",\n  title: \"Additional Details\",\n  numeric: false,\n  align: \"center\"\n}];\n\n/**\r\n * Renders the main page - Product Batches, for registered users.\r\n * Handles toggling child components and interacts with the contracts to fetch product details.\r\n * \r\n * @author syuki\r\n */\nexport default class Home extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      tabValue: 0,\n      dataKey: null,\n      showAddBatch: false,\n      showConfirmAction: false,\n      showBatchDetails: false,\n      showLoader: false,\n      productRow: null,\n      actionState: null,\n      productId: null,\n      transactionSuccess: null,\n      retailerDataKey: null,\n      isAuthenticated: null,\n      addressZero: \"0x0000000000000000000000000000000000000000\"\n    };\n  }\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.SupplyChainLifecycle;\n    const key = contract.methods.getAllProductDetails.cacheCall();\n    this.setState({\n      dataKey: key\n    });\n  }\n  getLifeCycleContract() {\n    const {\n      SupplyChainLifecycle\n    } = this.props.drizzleState.contracts;\n    return SupplyChainLifecycle;\n  }\n  disableActionButton(action) {\n    let disable = false;\n    if (action != null) {\n      switch (action) {\n        case STATUS_ACTIONS[7]:\n          disable = true;\n          break;\n      }\n    }\n    return disable;\n  }\n\n  //Maps available actions based on product statuses for each user type.\n  fetchProductStatusActions(productDetails) {\n    let statusAction = STATUS_ACTIONS[productDetails[\"productStatus\"]];\n    if (this.props.userType == USER_TYPES[0]) {\n      if (productDetails[\"productStatus\"] > 0) {\n        statusAction = STATUS_ACTIONS[7];\n      }\n    }\n    if (this.props.userType == USER_TYPES[1]) {\n      if (productDetails[\"productStatus\"] == 2) {\n        statusAction = STATUS_ACTIONS[5];\n      } else if (productDetails[\"productStatus\"] == 6 && productDetails[\"retailerAddresses\"] == this.state.addressZero) {\n        statusAction = STATUS_ACTIONS[2];\n      } else if (productDetails[\"productStatus\"] > 2) {\n        statusAction = STATUS_ACTIONS[7];\n      }\n    }\n    if (this.props.userType == USER_TYPES[2]) {\n      if (productDetails[\"productStatus\"] == 4 && productDetails[\"retailerAddresses\"] != this.state.addressZero) {\n        statusAction = STATUS_ACTIONS[5];\n      } else if (productDetails[\"productStatus\"] == 6 && productDetails[\"retailerAddresses\"] != this.state.addressZero) {\n        statusAction = STATUS_ACTIONS[4];\n      } else if (productDetails[\"productStatus\"] == 5) {\n        statusAction = STATUS_ACTIONS[6];\n      } else if (productDetails[\"productStatus\"] > 6) {\n        statusAction = STATUS_ACTIONS[7];\n      }\n    }\n    return statusAction;\n  }\n\n  //Maps the required product statuses for each user type.\n  fetchProductStatuses(productDetails) {\n    let productStatuses = PRODUCT_STATUSES[productDetails[\"productStatus\"]];\n    //Abstracts all statuses after payment to SOLD. \n    if (this.props.userType == USER_TYPES[0]) {\n      if (productDetails[\"productStatus\"] > 2) {\n        productStatuses = PRODUCT_STATUSES[7];\n      }\n    }\n    if (this.props.userType == USER_TYPES[1]) {\n      //Manages payment statuses - PAID and SOLD, depending on the user type.\n      if (productDetails[\"productStatus\"] == 6 && productDetails[\"retailerAddresses\"] == this.state.addressZero) {\n        productStatuses = PRODUCT_STATUSES[6];\n      }\n      //Abstracts all statuses after payment to SOLD. \n      else if (productDetails[\"productStatus\"] > 4 && productDetails[\"retailerAddresses\"] != this.state.addressZero) {\n        productStatuses = PRODUCT_STATUSES[7];\n      }\n    }\n    return productStatuses;\n  }\n  convertToDecimal(number) {\n    return number / 100;\n  }\n  getProductDetails(contractName) {\n    const productDetailsArray = contractName.getAllProductDetails[this.state.dataKey];\n    let rows = [];\n    if (productDetailsArray && productDetailsArray.value.length > 0) {\n      productDetailsArray.value.forEach(productDetails => {\n        const status = this.fetchProductStatuses(productDetails);\n        const action = this.fetchProductStatusActions(productDetails);\n        const newRow = {\n          productId: productDetails[\"productId\"],\n          productName: productDetails[\"productName\"],\n          productDesc: productDetails[\"productDesc\"],\n          productPrice: this.convertToDecimal(productDetails[\"productPrice\"]),\n          productQuantity: productDetails[\"productQuantity\"],\n          consumerAddress: productDetails[\"consumerAddress\"],\n          currentUser: productDetails[\"currentStatusUser\"],\n          distributorAddress: productDetails[\"distributorAddress\"],\n          producerAddress: productDetails[\"producerAddress\"],\n          retailerAddresses: productDetails[\"retailerAddresses\"],\n          productStatus: status,\n          action: action,\n          disableActionButton: this.disableActionButton(action)\n        };\n        rows.push(newRow);\n      });\n    }\n    return rows;\n  }\n  fetchActiveBatches(rows) {\n    //Non-active batches for producers = Sold batches. \n    if (this.props.userType == USER_TYPES[0]) {\n      return rows.filter(row => row.productStatus != PRODUCT_STATUSES[7]).reverse();\n    }\n    //Non-active and unrelated batches for distributor = Sold batches and batches yet to be \n    //enabled for pickup. \n    if (this.props.userType == USER_TYPES[1]) {\n      return rows.filter(row => row.productStatus != PRODUCT_STATUSES[0] && row.productStatus != PRODUCT_STATUSES[7]).reverse();\n    }\n    //Non-active and unrelated batches for retailer = Sold batches and batches yet to be \n    //released for shipping. \n    if (this.props.userType == USER_TYPES[2]) {\n      return rows.filter(row => row.productStatus != PRODUCT_STATUSES[0] && row.productStatus != PRODUCT_STATUSES[1] && row.productStatus != PRODUCT_STATUSES[2] && row.productStatus != PRODUCT_STATUSES[7]).reverse();\n    }\n    return rows.filter(row => !row.disableActionButton).reverse();\n  }\n\n  //Filters all the sold batches for all of the user types.\n  fetchPreviousBatches(rows) {\n    return rows.filter(row => row.productStatus == PRODUCT_STATUSES[7]).reverse();\n  }\n  showAddBatchPopUp() {\n    this.setState({\n      showAddBatch: true\n    });\n  }\n  hideAddBatchPopUp() {\n    this.setState({\n      showAddBatch: false\n    });\n  }\n  showConfirmActionPopUp(action, prodId) {\n    this.setState({\n      showConfirmAction: true,\n      actionState: action,\n      productId: prodId\n    });\n  }\n  hideConfirmActionPopUp(action, prodId) {\n    this.setState({\n      showConfirmAction: false\n    });\n  }\n  toggleBatchDetailsPopUp(prodRow) {\n    this.setState({\n      showBatchDetails: !this.state.showBatchDetails,\n      productRow: prodRow\n    });\n  }\n  showLoader() {\n    this.setState({\n      showLoader: true\n    });\n  }\n  hideLoader() {\n    this.setState({\n      showLoader: false\n    });\n  }\n  setTransactionSuccess(status) {\n    this.setState({\n      transactionSuccess: status\n    });\n  }\n  closeToastMessage() {\n    this.setState({\n      transactionSuccess: null\n    });\n  }\n  handleTabChange(event, newTabValue) {\n    this.setState({\n      tabValue: newTabValue\n    });\n  }\n  fetchEmptyTableString() {\n    let string = \"No batches available yet. \";\n    if (this.props.userType == USER_TYPES[0]) {\n      string += \"Try producing a batch.\";\n    } else {\n      string = \"No batches available for buying yet.\";\n    }\n    return string;\n  }\n  render() {\n    if (this.props.isAuthenticated || this.props.isSuccessfullyRegistered) {\n      //Updates registration state globally to render header and footer.\n      this.props.updateAuth(true);\n\n      //Updates user type for new user registration.\n      if (this.props.newUserType) {\n        this.props.updateUserType(this.props.newUserType);\n      }\n      const SupplyChainLifecycle = this.getLifeCycleContract();\n      const rows = this.getProductDetails(SupplyChainLifecycle);\n      const activeBatches = this.fetchActiveBatches(rows);\n      const previousBatches = this.fetchPreviousBatches(rows);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"main-body\",\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Paper, {\n        className: \"app\",\n        style: {\n          backgroundColor: \"#92869f63\",\n          minHeight: 600\n        },\n        elevation: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(AppBar, {\n        id: \"app-bar\",\n        position: \"static\",\n        elevation: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Tabs, {\n        variant: \"fullWidth\",\n        value: this.state.tabValue,\n        TabIndicatorProps: {\n          style: {\n            background: \"#FBFAFA\"\n          }\n        },\n        onChange: (event, value) => this.handleTabChange(event, value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        label: \"View Active Batches\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(Tab, {\n        label: \"View Sold Batches\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(TabPanel, {\n        value: this.state.tabValue,\n        index: 0,\n        count: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }\n      }, this.props.userType == USER_TYPES[0] ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: () => this.showAddBatchPopUp(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(AddIcon, {\n        style: {\n          paddingRight: \"4px\",\n          paddingTop: \"1px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 41\n        }\n      }), \"Produce a New Batch\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 33\n        }\n      })) : null, /*#__PURE__*/React.createElement(BatchTable, {\n        rows: activeBatches,\n        cols: cols,\n        userType: this.props.userType,\n        toggleBatchDetailsPopUp: prodRow => this.toggleBatchDetailsPopUp(prodRow),\n        showConfirmActionPopUp: (action, id) => this.showConfirmActionPopUp(action, id),\n        emptyRowsMessage: this.fetchEmptyTableString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(TabPanel, {\n        value: this.state.tabValue,\n        index: 1,\n        count: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(BatchTable, {\n        rows: previousBatches,\n        cols: cols,\n        toggleBatchDetailsPopUp: prodRow => this.toggleBatchDetailsPopUp(prodRow),\n        showConfirmActionPopUp: (action, id) => this.showConfirmActionPopUp(action, id),\n        emptyRowsMessage: \"No sold batches yet. Try selling a batch.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 29\n        }\n      })), this.state.showAddBatch ? /*#__PURE__*/React.createElement(ErrorBoundary, {\n        hideLoaderScreen: () => this.hideLoader(),\n        hideDialog: () => this.hideAddBatchPopUp(),\n        setTransactionSuccess: status => this.setTransactionSuccess(status),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(ProductBatchForm, {\n        open: this.state.showAddBatch,\n        closePopup: () => this.hideAddBatchPopUp(),\n        contractName: this.props.drizzle.contracts.SupplyChainLifecycle,\n        currentAddress: this.props.drizzleState.accounts[0],\n        showLoaderScreen: () => this.showLoader(),\n        hideLoaderScreen: () => this.hideLoader(),\n        setTransactionSuccess: status => this.setTransactionSuccess(status),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 33\n        }\n      })) : null, this.state.showBatchDetails ? /*#__PURE__*/React.createElement(ProductDetails, {\n        open: this.state.showBatchDetails,\n        closePopup: () => this.toggleBatchDetailsPopUp(),\n        product: this.state.productRow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 29\n        }\n      }) : null, this.state.showConfirmAction ? /*#__PURE__*/React.createElement(ErrorBoundary, {\n        hideLoaderScreen: () => this.hideLoader(),\n        hideDialog: () => this.hideConfirmActionPopUp(),\n        setTransactionSuccess: status => this.setTransactionSuccess(status),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(PerformStatusAction, {\n        open: this.state.showConfirmAction,\n        closePopup: () => this.hideConfirmActionPopUp(),\n        contractName: this.props.drizzle.contracts.SupplyChainLifecycle,\n        action: this.state.actionState,\n        productId: this.state.productId,\n        currentAddress: this.props.drizzleState.accounts[0],\n        showLoaderScreen: () => this.showLoader(),\n        hideLoaderScreen: () => this.hideLoader(),\n        setTransactionSuccess: status => this.setTransactionSuccess(status),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 33\n        }\n      })) : null, this.state.transactionSuccess ? /*#__PURE__*/React.createElement(ToastMessage, {\n        open: this.state.transactionSuccess,\n        toastMessage: \"Transaction successful!\",\n        closeToastMessage: () => this.closeToastMessage(),\n        bgColor: \"#9986af\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 29\n        }\n      }) : null, this.state.transactionSuccess === false ? /*#__PURE__*/React.createElement(ToastMessage, {\n        open: this.state.transactionSuccess === false,\n        toastMessage: \"Transaction failed! Please check your connection and try again.\",\n        bgColor: \"#eb535e\",\n        closeToastMessage: () => this.closeToastMessage(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 29\n        }\n      }) : null, /*#__PURE__*/React.createElement(CircularPageLoader, {\n        open: this.state.showLoader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 25\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(Navigate, {\n        to: \"/new-user\",\n        replace: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n}\n;","map":{"version":3,"names":["React","Navigate","Button","Tabs","Tab","AppBar","Paper","AddIcon","PRODUCT_STATUSES","STATUS_ACTIONS","USER_TYPES","ProductBatchForm","ProductDetails","PerformStatusAction","BatchTable","ToastMessage","TabPanel","ErrorBoundary","CircularPageLoader","cols","field","title","numeric","align","Home","Component","state","tabValue","dataKey","showAddBatch","showConfirmAction","showBatchDetails","showLoader","productRow","actionState","productId","transactionSuccess","retailerDataKey","isAuthenticated","addressZero","componentDidMount","drizzle","props","contract","contracts","SupplyChainLifecycle","key","methods","getAllProductDetails","cacheCall","setState","getLifeCycleContract","drizzleState","disableActionButton","action","disable","fetchProductStatusActions","productDetails","statusAction","userType","fetchProductStatuses","productStatuses","convertToDecimal","number","getProductDetails","contractName","productDetailsArray","rows","value","length","forEach","status","newRow","productName","productDesc","productPrice","productQuantity","consumerAddress","currentUser","distributorAddress","producerAddress","retailerAddresses","productStatus","push","fetchActiveBatches","filter","row","reverse","fetchPreviousBatches","showAddBatchPopUp","hideAddBatchPopUp","showConfirmActionPopUp","prodId","hideConfirmActionPopUp","toggleBatchDetailsPopUp","prodRow","hideLoader","setTransactionSuccess","closeToastMessage","handleTabChange","event","newTabValue","fetchEmptyTableString","string","render","isSuccessfullyRegistered","updateAuth","newUserType","updateUserType","activeBatches","previousBatches","backgroundColor","minHeight","style","background","paddingRight","paddingTop","id","accounts"],"sources":["G:/blockchain-scm/appfrontend/src/components/Home.js"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport {PRODUCT_STATUSES, STATUS_ACTIONS} from './enum/ProductStatusEnum';\r\nimport {USER_TYPES} from './enum/UsersEnum';\r\n\r\nimport ProductBatchForm from './ProductBatchForm';\r\nimport ProductDetails from './ProductDetails';\r\nimport PerformStatusAction from './PerformStatusAction';\r\nimport BatchTable from './BatchTable';\r\nimport ToastMessage from \"./ToastMessage\";\r\nimport TabPanel from \"./TabPanel\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\n\r\nimport { CircularPageLoader } from \"./static/CircularPageLoader\";\r\n\r\nimport \"../css/App.css\";\r\n\r\nconst cols = [\r\n  { field: \"productID\", title: \"Product ID\", numeric: true, align: \"left\" },\r\n  { field: \"productName\", title: \"Product Name\", numeric: false, align: \"left\" },\r\n  { field: \"productStatus\", title: \"Status\", numeric: false, align: \"left\" },\r\n  { field: \"action\", title: \"Action\", numeric: false, align: \"center\" },\r\n  { field: \"productDesc\", title: \"Additional Details\", numeric: false, align: \"center\" },\r\n];\r\n\r\n/**\r\n * Renders the main page - Product Batches, for registered users.\r\n * Handles toggling child components and interacts with the contracts to fetch product details.\r\n * \r\n * @author syuki\r\n */\r\nexport default class Home extends React.Component {\r\n\r\n    state = { \r\n        tabValue: 0,\r\n        dataKey: null, \r\n        showAddBatch: false,\r\n        showConfirmAction: false,\r\n        showBatchDetails: false,\r\n        showLoader: false,\r\n        productRow: null,\r\n        actionState: null,\r\n        productId: null,\r\n        transactionSuccess: null,\r\n        retailerDataKey: null,\r\n        isAuthenticated: null,\r\n        addressZero: \"0x0000000000000000000000000000000000000000\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { drizzle } = this.props;\r\n        const contract = drizzle.contracts.SupplyChainLifecycle;\r\n        const key = contract.methods.getAllProductDetails.cacheCall();\r\n        this.setState({ dataKey: key });\r\n    }\r\n\r\n    getLifeCycleContract() {\r\n        const { SupplyChainLifecycle } = this.props.drizzleState.contracts;\r\n        return SupplyChainLifecycle;\r\n    }\r\n\r\n    disableActionButton(action){\r\n        let disable = false;\r\n        if(action != null){\r\n            switch(action) {\r\n                case STATUS_ACTIONS[7]:\r\n                    disable = true;\r\n                    break;\r\n            }\r\n        }\r\n        return disable;\r\n    }\r\n\r\n    //Maps available actions based on product statuses for each user type.\r\n    fetchProductStatusActions(productDetails){\r\n        let statusAction = STATUS_ACTIONS[productDetails[\"productStatus\"]];\r\n        if(this.props.userType == USER_TYPES[0]){\r\n            if(productDetails[\"productStatus\"] > 0){\r\n                statusAction = STATUS_ACTIONS[7];\r\n            }\r\n        }\r\n        if(this.props.userType == USER_TYPES[1]){\r\n            if(productDetails[\"productStatus\"] == 2){\r\n                statusAction = STATUS_ACTIONS[5];\r\n            }\r\n            else if(productDetails[\"productStatus\"] == 6 \r\n                && productDetails[\"retailerAddresses\"] == this.state.addressZero){\r\n                statusAction = STATUS_ACTIONS[2];\r\n            } else if(productDetails[\"productStatus\"] > 2){\r\n                statusAction = STATUS_ACTIONS[7];\r\n            }\r\n        }\r\n        if(this.props.userType == USER_TYPES[2]){\r\n            if(productDetails[\"productStatus\"] == 4\r\n                && productDetails[\"retailerAddresses\"] != this.state.addressZero){\r\n                statusAction = STATUS_ACTIONS[5];\r\n            } else if (productDetails[\"productStatus\"] == 6 \r\n                        && productDetails[\"retailerAddresses\"] != this.state.addressZero){\r\n                statusAction = STATUS_ACTIONS[4];\r\n            } else if (productDetails[\"productStatus\"] == 5){\r\n                statusAction = STATUS_ACTIONS[6];\r\n            } else if(productDetails[\"productStatus\"] > 6) {\r\n                statusAction = STATUS_ACTIONS[7];\r\n            }\r\n        }\r\n        return statusAction;\r\n    }\r\n\r\n    //Maps the required product statuses for each user type.\r\n    fetchProductStatuses(productDetails) {\r\n        let productStatuses = PRODUCT_STATUSES[productDetails[\"productStatus\"]];\r\n        //Abstracts all statuses after payment to SOLD. \r\n        if(this.props.userType == USER_TYPES[0]){\r\n            if(productDetails[\"productStatus\"] > 2) {\r\n                productStatuses = PRODUCT_STATUSES[7];\r\n            }\r\n        }\r\n        if(this.props.userType == USER_TYPES[1]){\r\n            //Manages payment statuses - PAID and SOLD, depending on the user type.\r\n            if(productDetails[\"productStatus\"] == 6 \r\n                && productDetails[\"retailerAddresses\"] == this.state.addressZero){\r\n                productStatuses = PRODUCT_STATUSES[6];\r\n            } \r\n            //Abstracts all statuses after payment to SOLD. \r\n            else if(productDetails[\"productStatus\"] > 4 \r\n                && productDetails[\"retailerAddresses\"] != this.state.addressZero){\r\n                productStatuses = PRODUCT_STATUSES[7];\r\n            }\r\n        }\r\n        return productStatuses;\r\n    }\r\n\r\n    convertToDecimal(number) {\r\n        return number/100;\r\n    }\r\n\r\n    getProductDetails(contractName) {\r\n        const productDetailsArray = contractName.getAllProductDetails[this.state.dataKey];\r\n        let rows = [];\r\n        if(productDetailsArray && productDetailsArray.value.length > 0){\r\n            productDetailsArray.value.forEach(productDetails => {\r\n                const status = this.fetchProductStatuses(productDetails);\r\n                const action = this.fetchProductStatusActions(productDetails);\r\n                const newRow = {\r\n                    productId: productDetails[\"productId\"],\r\n                    productName: productDetails[\"productName\"], \r\n                    productDesc: productDetails[\"productDesc\"], \r\n                    productPrice: this.convertToDecimal(productDetails[\"productPrice\"]),\r\n                    productQuantity: productDetails[\"productQuantity\"],\r\n                    consumerAddress: productDetails[\"consumerAddress\"], \r\n                    currentUser: productDetails[\"currentStatusUser\"], \r\n                    distributorAddress: productDetails[\"distributorAddress\"],\r\n                    producerAddress: productDetails[\"producerAddress\"],\r\n                    retailerAddresses: productDetails[\"retailerAddresses\"],\r\n                    productStatus: status,\r\n                    action: action,\r\n                    disableActionButton: this.disableActionButton(action)\r\n                };\r\n                rows.push(newRow);\r\n            });\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    fetchActiveBatches(rows) {\r\n        //Non-active batches for producers = Sold batches. \r\n        if(this.props.userType == USER_TYPES[0]){\r\n            return rows.filter((row) => row.productStatus != PRODUCT_STATUSES[7]).reverse();\r\n        }\r\n        //Non-active and unrelated batches for distributor = Sold batches and batches yet to be \r\n        //enabled for pickup. \r\n        if(this.props.userType == USER_TYPES[1]){\r\n            return rows.filter((row) => row.productStatus != PRODUCT_STATUSES[0] \r\n                                        && row.productStatus != PRODUCT_STATUSES[7]).reverse();\r\n        }\r\n        //Non-active and unrelated batches for retailer = Sold batches and batches yet to be \r\n        //released for shipping. \r\n        if(this.props.userType == USER_TYPES[2]){\r\n            return rows.filter((row) => row.productStatus != PRODUCT_STATUSES[0]\r\n                                        && row.productStatus != PRODUCT_STATUSES[1]\r\n                                        && row.productStatus != PRODUCT_STATUSES[2]\r\n                                        && row.productStatus != PRODUCT_STATUSES[7]).reverse();\r\n        }\r\n        return rows.filter((row) => !row.disableActionButton).reverse();\r\n    }\r\n\r\n    //Filters all the sold batches for all of the user types.\r\n    fetchPreviousBatches(rows) {\r\n        return rows.filter((row) => row.productStatus == PRODUCT_STATUSES[7]).reverse();\r\n    }\r\n\r\n    showAddBatchPopUp() {\r\n        this.setState({\r\n            showAddBatch: true\r\n        });\r\n    }\r\n\r\n    hideAddBatchPopUp() {\r\n        this.setState({\r\n            showAddBatch: false\r\n        });\r\n    }\r\n\r\n    showConfirmActionPopUp(action, prodId) {\r\n        this.setState({\r\n            showConfirmAction: true,\r\n            actionState: action,\r\n            productId: prodId\r\n        });\r\n    }\r\n\r\n    hideConfirmActionPopUp(action, prodId) {\r\n        this.setState({\r\n            showConfirmAction: false\r\n        });\r\n    }\r\n\r\n    toggleBatchDetailsPopUp(prodRow) {\r\n        this.setState({\r\n            showBatchDetails: !this.state.showBatchDetails,\r\n            productRow: prodRow\r\n        });\r\n    }\r\n\r\n    showLoader(){\r\n        this.setState({\r\n            showLoader: true\r\n        });\r\n    }\r\n\r\n    hideLoader(){\r\n        this.setState({\r\n            showLoader: false\r\n        });\r\n    }\r\n\r\n    setTransactionSuccess(status){\r\n        this.setState({ transactionSuccess: status});\r\n    }\r\n\r\n    closeToastMessage(){\r\n        this.setState({ transactionSuccess: null});\r\n    }\r\n\r\n    handleTabChange(event, newTabValue){\r\n        this.setState({ tabValue: newTabValue })\r\n    }\r\n\r\n    fetchEmptyTableString(){\r\n        let string = \"No batches available yet. \";\r\n        if(this.props.userType == USER_TYPES[0]){\r\n            string+=\"Try producing a batch.\";\r\n        } else {\r\n            string = \"No batches available for buying yet.\";\r\n        }\r\n        return string;\r\n    }\r\n\r\n    render() {\r\n        if(this.props.isAuthenticated || this.props.isSuccessfullyRegistered) {\r\n            //Updates registration state globally to render header and footer.\r\n            this.props.updateAuth(true);\r\n\r\n            //Updates user type for new user registration.\r\n            if(this.props.newUserType){\r\n                this.props.updateUserType(this.props.newUserType);\r\n            }\r\n\r\n            const SupplyChainLifecycle = this.getLifeCycleContract();\r\n            const rows = this.getProductDetails(SupplyChainLifecycle);\r\n            const activeBatches = this.fetchActiveBatches(rows);\r\n            const previousBatches = this.fetchPreviousBatches(rows);\r\n\r\n            return (\r\n                <div className=\"main-body\" color=\"primary\">\r\n                    <Paper className=\"app\" style={{ backgroundColor: \"#92869f63\", minHeight: 600 }} elevation={3}>\r\n                        <AppBar \r\n                            id=\"app-bar\"\r\n                            position=\"static\" \r\n                            elevation={0} \r\n                        >\r\n                            <Tabs \r\n                                variant=\"fullWidth\"\r\n                                value={this.state.tabValue} \r\n                                TabIndicatorProps={{ style: { background: \"#FBFAFA\" } }}\r\n                                onChange={(event, value) => this.handleTabChange(event, value)}\r\n                            >\r\n                                <Tab label=\"View Active Batches\" />\r\n                                <Tab label=\"View Sold Batches\" />\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        \r\n                        <TabPanel value={this.state.tabValue} index={0} count={2}>\r\n                            { this.props.userType == USER_TYPES[0] ? \r\n                            <div>\r\n                                <Button \r\n                                    variant=\"contained\" \r\n                                    color=\"secondary\" \r\n                                    onClick={() => this.showAddBatchPopUp()}>\r\n                                        <AddIcon style={{ paddingRight: \"4px\", paddingTop: \"1px\" }} />Produce a New Batch\r\n                                </Button>                     \r\n                                <br/>\r\n                                <br/>\r\n                            </div>\r\n                                : null\r\n                            }\r\n                            <BatchTable \r\n                                rows={activeBatches} \r\n                                cols={cols} \r\n                                userType={this.props.userType}\r\n                                toggleBatchDetailsPopUp={(prodRow) => this.toggleBatchDetailsPopUp(prodRow)} \r\n                                showConfirmActionPopUp={(action, id) => this.showConfirmActionPopUp(action, id)}\r\n                                emptyRowsMessage= {this.fetchEmptyTableString()}\r\n                            />\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value={this.state.tabValue} index={1} count={2}>\r\n                            <BatchTable \r\n                                rows={previousBatches} \r\n                                cols={cols} \r\n                                toggleBatchDetailsPopUp={(prodRow) => this.toggleBatchDetailsPopUp(prodRow)} \r\n                                showConfirmActionPopUp={(action, id) => this.showConfirmActionPopUp(action, id)}\r\n                                emptyRowsMessage=\"No sold batches yet. Try selling a batch.\"\r\n                            />\r\n                        </TabPanel>\r\n\r\n                        {/* Pop-ups & Toasts*/}\r\n\r\n                        {this.state.showAddBatch ? \r\n                            <ErrorBoundary \r\n                                hideLoaderScreen={() => this.hideLoader()} \r\n                                hideDialog={() => this.hideAddBatchPopUp()}\r\n                                setTransactionSuccess={(status) => this.setTransactionSuccess(status)}\r\n                            >\r\n                                <ProductBatchForm \r\n                                    open={this.state.showAddBatch} \r\n                                    closePopup={() => this.hideAddBatchPopUp()}\r\n                                    contractName={this.props.drizzle.contracts.SupplyChainLifecycle}\r\n                                    currentAddress={this.props.drizzleState.accounts[0]}\r\n                                    showLoaderScreen={() => this.showLoader()}\r\n                                    hideLoaderScreen={() => this.hideLoader()}\r\n                                    setTransactionSuccess={(status) => this.setTransactionSuccess(status)}\r\n                                />\r\n                            </ErrorBoundary>\r\n                            : null\r\n                        }\r\n\r\n                        {this.state.showBatchDetails ? \r\n                            <ProductDetails \r\n                                open={this.state.showBatchDetails} \r\n                                closePopup={() => this.toggleBatchDetailsPopUp()} \r\n                                product={this.state.productRow}/>\r\n                            : null\r\n                        }\r\n\r\n                        {this.state.showConfirmAction ? \r\n                            <ErrorBoundary \r\n                                hideLoaderScreen={() => this.hideLoader()} \r\n                                hideDialog={() => this.hideConfirmActionPopUp()}\r\n                                setTransactionSuccess={(status) => this.setTransactionSuccess(status)}\r\n                            >\r\n                                <PerformStatusAction \r\n                                    open={this.state.showConfirmAction} \r\n                                    closePopup={() => this.hideConfirmActionPopUp()} \r\n                                    contractName={this.props.drizzle.contracts.SupplyChainLifecycle}\r\n                                    action={this.state.actionState}\r\n                                    productId={this.state.productId}\r\n                                    currentAddress={this.props.drizzleState.accounts[0]}\r\n                                    showLoaderScreen={() => this.showLoader()}\r\n                                    hideLoaderScreen={() => this.hideLoader()}\r\n                                    setTransactionSuccess={(status) => this.setTransactionSuccess(status)}\r\n                                />\r\n                            </ErrorBoundary>\r\n                            : null\r\n                        }\r\n\r\n                        {this.state.transactionSuccess ? \r\n                            <ToastMessage \r\n                                open={this.state.transactionSuccess} \r\n                                toastMessage=\"Transaction successful!\"\r\n                                closeToastMessage={() => this.closeToastMessage()}\r\n                                bgColor='#9986af'\r\n                            />\r\n                            : null\r\n                        }\r\n                        {this.state.transactionSuccess === false ? \r\n                            <ToastMessage \r\n                                open={this.state.transactionSuccess === false} \r\n                                toastMessage=\"Transaction failed! Please check your connection and try again.\"\r\n                                bgColor='#eb535e'\r\n                                closeToastMessage={() => this.closeToastMessage()}\r\n                            />\r\n                            : null\r\n                        }\r\n                \r\n                        <CircularPageLoader \r\n                            open={this.state.showLoader} \r\n                        />\r\n                        \r\n                    </Paper>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <Navigate to=\"/new-user\" replace />;\r\n        }\r\n    };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}