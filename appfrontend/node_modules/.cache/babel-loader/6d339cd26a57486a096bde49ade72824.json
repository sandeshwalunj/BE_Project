{"ast":null,"code":"var _jsxFileName = \"G:\\\\blockchain-scm\\\\appfrontend\\\\src\\\\components\\\\PerformStatusAction.js\";\nimport React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Grid from \"@material-ui/core/Grid\";\nimport { STATUS_ACTIONS } from './enum/ProductStatusEnum';\nimport \"../css/PopUpModal.css\";\n\n/**\r\n * Component to update the status of a batch by interacting with the contracts. \r\n * Takes product ID and the action to be performed as input props.\r\n * \r\n * @author syuki\r\n */\nexport default class PerformStatusAction extends React.Component {\n  getActionSpecificMethod(action) {\n    let method = null;\n    if (action != null && this.props.contractName != null) {\n      switch (action) {\n        case STATUS_ACTIONS[0]:\n          method = this.props.contractName.methods[\"markProductReadyForPickup\"];\n          break;\n        case STATUS_ACTIONS[1]:\n          method = this.props.contractName.methods[\"pickUpProduct\"];\n          break;\n        case STATUS_ACTIONS[2]:\n          method = this.props.contractName.methods[\"releaseProductShipment\"];\n          break;\n        case STATUS_ACTIONS[3]:\n          method = this.props.contractName.methods[\"receiveProductShipment\"];\n          break;\n        case STATUS_ACTIONS[4]:\n          method = this.props.contractName.methods[\"markProductReadyForSale\"];\n          break;\n        case STATUS_ACTIONS[5]:\n          method = this.props.contractName.methods[\"buyProduct\"];\n          break;\n        case STATUS_ACTIONS[6]:\n          method = this.props.contractName.methods[\"sellProductToConsumer\"];\n          break;\n      }\n    }\n    return method;\n  }\n  confirmAction() {\n    this.props.showLoaderScreen();\n    const contractMethod = this.getActionSpecificMethod(this.props.action);\n    if (contractMethod != null) {\n      contractMethod(this.props.productId).send({\n        from: this.props.currentAddress,\n        gas: 1000000\n      }).then(receipt => {\n        this.props.setTransactionSuccess(true);\n        console.log(receipt);\n        this.props.hideLoaderScreen();\n        this.props.closePopup();\n      }).catch(error => {\n        this.props.setTransactionSuccess(false);\n        console.log(error);\n        this.props.hideLoaderScreen();\n        this.props.closePopup();\n      });\n    } else {\n      this.props.setTransactionSuccess(false);\n      this.props.hideLoaderScreen();\n      this.props.closePopup();\n    }\n  }\n  toCamelCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(Dialog, {\n      open: this.props.open,\n      \"aria-labelledby\": \"scroll-dialog-title\",\n      \"aria-describedby\": \"scroll-dialog-description\",\n      fullWidth: true,\n      onClose: this.props.closePopup,\n      scroll: \"paper\",\n      className: \"popup-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        paddingBottom: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"scroll-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }, \"Confirm \", this.toCamelCase(this.props.action), \"?\"), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      color: \"secondary\",\n      className: \"form-grid\",\n      justifyContent: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"outlined\",\n      className: \"nf-button\",\n      color: \"primary\",\n      onClick: this.props.closePopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 37\n      }\n    }, \"Close\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      className: \"nf-button\",\n      color: \"primary\",\n      onClick: this.confirmAction.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 37\n      }\n    }, \"Confirm\")))))));\n  }\n}\n;","map":{"version":3,"names":["React","Button","Dialog","DialogTitle","DialogActions","Grid","STATUS_ACTIONS","PerformStatusAction","Component","getActionSpecificMethod","action","method","props","contractName","methods","confirmAction","showLoaderScreen","contractMethod","productId","send","from","currentAddress","gas","then","receipt","setTransactionSuccess","console","log","hideLoaderScreen","closePopup","catch","error","toCamelCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","render","open","paddingBottom","bind"],"sources":["G:/blockchain-scm/appfrontend/src/components/PerformStatusAction.js"],"sourcesContent":["import React from \"react\"; \r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport {STATUS_ACTIONS} from './enum/ProductStatusEnum';\r\n\r\nimport \"../css/PopUpModal.css\";\r\n\r\n/**\r\n * Component to update the status of a batch by interacting with the contracts. \r\n * Takes product ID and the action to be performed as input props.\r\n * \r\n * @author syuki\r\n */\r\nexport default class PerformStatusAction extends React.Component {\r\n\r\n    getActionSpecificMethod(action){\r\n        let method = null;\r\n        if(action != null && this.props.contractName != null){\r\n            switch(action) {\r\n                case STATUS_ACTIONS[0]:\r\n                    method = this.props.contractName.methods[\"markProductReadyForPickup\"];\r\n                    break;\r\n                case STATUS_ACTIONS[1]:\r\n                    method = this.props.contractName.methods[\"pickUpProduct\"];\r\n                    break;\r\n                case STATUS_ACTIONS[2]:\r\n                    method = this.props.contractName.methods[\"releaseProductShipment\"];\r\n                    break;\r\n                case STATUS_ACTIONS[3]:\r\n                    method = this.props.contractName.methods[\"receiveProductShipment\"];\r\n                    break;\r\n                case STATUS_ACTIONS[4]:\r\n                    method = this.props.contractName.methods[\"markProductReadyForSale\"];\r\n                    break;\r\n                case STATUS_ACTIONS[5]:\r\n                    method = this.props.contractName.methods[\"buyProduct\"];\r\n                    break;\r\n                case STATUS_ACTIONS[6]:\r\n                    method = this.props.contractName.methods[\"sellProductToConsumer\"];\r\n                    break;\r\n            }\r\n        }\r\n        return method;\r\n    }\r\n\r\n    confirmAction(){\r\n        this.props.showLoaderScreen();\r\n        const contractMethod = this.getActionSpecificMethod(this.props.action);\r\n        if(contractMethod != null){\r\n            contractMethod(\r\n                this.props.productId\r\n            )\r\n            .send(\r\n                {\r\n                    from: this.props.currentAddress,\r\n                    gas: 1000000\r\n                } \r\n            )\r\n            .then((receipt) => {\r\n                this.props.setTransactionSuccess(true);\r\n                console.log(receipt);\r\n                this.props.hideLoaderScreen();\r\n                this.props.closePopup();\r\n            })\r\n            .catch((error) => {\r\n                this.props.setTransactionSuccess(false);\r\n                console.log(error);\r\n                this.props.hideLoaderScreen();\r\n                this.props.closePopup();\r\n            });\r\n        }\r\n        else {\r\n            this.props.setTransactionSuccess(false);\r\n            this.props.hideLoaderScreen();\r\n            this.props.closePopup();\r\n        }\r\n    }\r\n\r\n    toCamelCase(str) {\r\n        return str.replace(\r\n            /\\w\\S*/g,\r\n            function(txt) {\r\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Dialog\r\n            open={this.props.open}\r\n            aria-labelledby=\"scroll-dialog-title\"\r\n            aria-describedby=\"scroll-dialog-description\"\r\n            fullWidth\r\n            onClose={this.props.closePopup}\r\n            scroll=\"paper\" \r\n            className=\"popup-modal\">\r\n                <div style={{ paddingBottom: \"20px\"}}>\r\n                    <center>\r\n                        <DialogTitle id=\"scroll-dialog-title\">Confirm {this.toCamelCase(this.props.action)}?</DialogTitle>\r\n                        <DialogActions>\r\n                            <Grid container color=\"secondary\" className=\"form-grid\"  justifyContent=\"center\" >\r\n                                <Grid item xs={3}>\r\n                                    <Button variant=\"outlined\" className=\"nf-button\" color=\"primary\" onClick={this.props.closePopup}>Close</Button>\r\n                                </Grid> \r\n                                <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" className=\"nf-button\" color=\"primary\" onClick={this.confirmAction.bind(this)}>Confirm</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DialogActions>\r\n                    </center>\r\n                </div>\r\n            </Dialog>\r\n        )\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}